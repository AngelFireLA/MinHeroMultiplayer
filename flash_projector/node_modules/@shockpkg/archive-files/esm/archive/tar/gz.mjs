import { createGunzip } from 'node:zlib';
import { ArchiveTar } from "../tar.mjs";

/**
 * ArchiveTarGz object.
 */
export class ArchiveTarGz extends ArchiveTar {
  /**
   * @inheritdoc
   */
  static FILE_EXTENSIONS = ['.tar.gz', '.tgz'];

  /**
   * ArchiveTarGz constructor.
   *
   * @param path File path.
   */
  constructor(path) {
    super(path);
  }

  /**
   * @inheritDoc
   */
  async *_decompress(input) {
    const gz = createGunzip();
    const datas = [];
    gz.on('data', data => {
      datas.push(data);
    });
    for await (const chunk of input) {
      while (datas.length) {
        yield datas.shift();
      }
      await new Promise((resolve, reject) => {
        gz.write(chunk, err => {
          if (err) {
            reject(err);
            return;
          }
          resolve();
        });
      });
      while (datas.length) {
        yield datas.shift();
      }
    }
    while (datas.length) {
      yield datas.shift();
    }
    await new Promise((resolve, reject) => {
      gz.once('end', resolve);
      gz.once('error', reject);
      gz.end();
    });
    while (datas.length) {
      yield datas.shift();
    }
  }
}
//# sourceMappingURL=gz.mjs.map