import unbzip2Stream from 'unbzip2-stream';
import { ArchiveTar } from "../tar.mjs";

/**
 * ArchiveTarBz2 object.
 */
export class ArchiveTarBz2 extends ArchiveTar {
  /**
   * @inheritdoc
   */
  static FILE_EXTENSIONS = ['.tar.bz2', '.tbz2'];

  /**
   * ArchiveTarBz2 constructor.
   *
   * @param path File path.
   */
  constructor(path) {
    super(path);
  }

  /**
   * @inheritDoc
   */
  async *_decompress(input) {
    const bz = unbzip2Stream();
    let error = null;

    /**
     * This stream has no callbacks for write, listen for error.
     *
     * @param err Stream error.
     */
    const onError = err => {
      error = error || err;
    };
    bz.on('error', onError);
    const datas = [];
    bz.on('data', data => {
      datas.push(data);
    });
    for await (const chunk of input) {
      if (error) {
        throw error;
      }
      while (datas.length) {
        yield datas.shift();
      }
      bz.write(chunk);
      if (error) {
        throw error;
      }
      while (datas.length) {
        yield datas.shift();
      }
    }
    if (error) {
      throw error;
    }
    while (datas.length) {
      yield datas.shift();
    }
    bz.off('error', onError);
    await new Promise((resolve, reject) => {
      bz.once('end', resolve);
      bz.once('error', reject);
      bz.end();
    });
    while (datas.length) {
      yield datas.shift();
    }
  }
}
//# sourceMappingURL=bz2.mjs.map