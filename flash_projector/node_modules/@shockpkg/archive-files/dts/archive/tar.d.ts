import { Archive, Entry, IEntryInfo } from '../archive.ts';
export interface IEntryInfoTar extends IEntryInfo {
    /**
     * @inheritdoc
     */
    archive: ArchiveTar;
    /**
     * @inheritdoc
     */
    size: number;
    /**
     * @inheritdoc
     */
    sizeComp?: null;
    /**
     * @inheritdoc
     */
    mode: number;
    /**
     * @inheritdoc
     */
    uid: number;
    /**
     * @inheritdoc
     */
    gid: number;
    /**
     * @inheritdoc
     */
    uname?: string;
    /**
     * @inheritdoc
     */
    gname?: string;
    /**
     * @inheritdoc
     */
    atime?: null;
    /**
     * @inheritdoc
     */
    mtime: Date;
    /**
     * Entry linkname if present.
     */
    linkname: string | null;
    /**
     * @inheritdoc
     */
    readRsrc?: null;
}
/**
 * EntryTar object.
 */
export declare class EntryTar extends Entry {
    /**
     * @inheritdoc
     */
    readonly archive: ArchiveTar;
    /**
     * @inheritdoc
     */
    readonly size: number;
    /**
     * @inheritdoc
     */
    readonly sizeComp: null;
    /**
     * @inheritdoc
     */
    readonly mode: number;
    /**
     * @inheritdoc
     */
    readonly uid: number;
    /**
     * @inheritdoc
     */
    readonly gid: number;
    /**
     * @inheritdoc
     */
    readonly uname: string | null;
    /**
     * @inheritdoc
     */
    readonly gname: string | null;
    /**
     * @inheritdoc
     */
    readonly atime: null;
    /**
     * @inheritdoc
     */
    readonly mtime: Date;
    /**
     * Entry linkname if present.
     */
    readonly linkname: string | null;
    /**
     * @inheritdoc
     */
    protected readonly _readRsrc: null;
    /**
     * EntryTar constructor.
     *
     * @param info Info object.
     */
    constructor(info: Readonly<IEntryInfoTar>);
}
/**
 * ArchiveTar object.
 */
export declare class ArchiveTar extends Archive {
    /**
     * @inheritdoc
     */
    static readonly FILE_EXTENSIONS: readonly string[] | null;
    /**
     * @inheritdoc
     */
    readonly Entry: typeof EntryTar;
    /**
     * ArchiveTar constructor.
     *
     * @param path File path.
     */
    constructor(path: string);
    /**
     * @inheritdoc
     */
    read(itter: (entry: EntryTar) => Promise<unknown>): Promise<void>;
    /**
     * @inheritdoc
     */
    protected _read(itter: (entry: EntryTar) => Promise<unknown>): Promise<void>;
    /**
     * A async buffer generator to decopress if needed.
     *
     * @param input Buffer generator.
     * @yields Decompressed data.
     */
    protected _decompress(input: AsyncGenerator<Buffer>): AsyncGenerator<Buffer, void, unknown>;
}
