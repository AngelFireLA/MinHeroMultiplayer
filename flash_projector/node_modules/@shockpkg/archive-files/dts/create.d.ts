import { Archive } from './archive.ts';
export interface ICreateArchiveOptions {
    /**
     * Set the nobrowse option on mounted disk images.
     *
     * @default false
     */
    nobrowse?: boolean;
}
/**
 * Create an Archive instance for a given path.
 * Based on file extension.
 *
 * @param path File path.
 * @param options Optional options.
 * @returns Archive instance or null.
 */
export declare function createArchiveByFileExtension(path: string, options?: Readonly<ICreateArchiveOptions> | null): Archive | null;
/**
 * Create an Archive instance for a given path.
 * Based on file extension.
 *
 * @param path File path.
 * @param options Optional options.
 * @returns Archive instance.
 */
export declare function createArchiveByFileExtensionOrThrow(path: string, options?: Readonly<ICreateArchiveOptions> | null): Archive;
/**
 * Create an Archive instance for a given path.
 * Based on file extension or if a directory.
 *
 * @param path File path.
 * @param options Optional options.
 * @returns Archive instance or null.
 */
export declare function createArchiveByFileStat(path: string, options?: Readonly<ICreateArchiveOptions> | null): Promise<Archive | null>;
/**
 * Create an Archive instance for a given path.
 * Based on file extension or if a directory.
 *
 * @param path File path.
 * @param options Optional options.
 * @returns Archive instance.
 */
export declare function createArchiveByFileStatOrThrow(path: string, options?: Readonly<ICreateArchiveOptions> | null): Promise<Archive>;
