{"version":3,"file":"tar.js","names":["_nodeFs","require","_nodeStream","_archive","_types","itTar","streamFromBufferListGenerator","gen","r","Readable","read","next","then","done","value","push","slice","err","emit","EntryTar","Entry","sizeComp","atime","_readRsrc","constructor","info","archive","size","mode","uid","gid","uname","gname","mtime","linkname","exports","ArchiveTar","Archive","FILE_EXTENSIONS","path","itter","_read","each","header","stream","type","PathType","FILE","SYMLINK","DIRECTORY","pathRaw","name","linknameBuffer","Buffer","from","readData","readSymlink","Error","length","entry","ret","trigger","cancel","input","createReadStream","extract","body","_decompress","destroy","chunk"],"sources":["../../src/archive/tar.ts"],"sourcesContent":["/* eslint-disable max-classes-per-file */\n\nimport {createReadStream} from 'node:fs';\nimport {Readable} from 'node:stream';\n\nimport {Archive, Entry, IEntryInfo} from '../archive.ts';\nimport {PathType} from '../types.ts';\n\n// Based on it-tar TarEntryHeader.\ninterface IHeader {\n\tname: string;\n\tuid: number;\n\tgid: number;\n\tsize: number;\n\tmode: number;\n\tmtime: Date;\n\ttype?: string;\n\ttypeflag?: number;\n\tlinkname?: string;\n\tuname?: string;\n\tgname?: string;\n}\n\ninterface IBufferList {\n\tslice: () => Buffer;\n}\n\n/**\n * Load it-tar, even in CommonJS.\n *\n * @returns The it-tar module.\n */\nconst itTar = async () =>\n\timport('it-tar' as string) as Promise<{\n\t\textract: () => (input: AsyncGenerator<Buffer>) => AsyncIterable<{\n\t\t\theader: IHeader;\n\t\t\tbody: AsyncGenerator<IBufferList>;\n\t\t}>;\n\t}>;\n\n/**\n * Create stream from a BufferList generator.\n *\n * @param gen BufferList generator.\n * @returns Readable stream.\n */\nconst streamFromBufferListGenerator = (gen: AsyncGenerator<IBufferList>) => {\n\tconst r = new Readable({\n\t\t/**\n\t\t * Read method.\n\t\t */\n\t\tread: () => {\n\t\t\tgen.next().then(\n\t\t\t\t({done, value}) => {\n\t\t\t\t\t// eslint-disable-next-line unicorn/prefer-spread\n\t\t\t\t\tr.push(done ? null : value.slice());\n\t\t\t\t},\n\t\t\t\terr => {\n\t\t\t\t\tr.emit('error', err);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t});\n\treturn r;\n};\n\nexport interface IEntryInfoTar extends IEntryInfo {\n\t/**\n\t * @inheritdoc\n\t */\n\tarchive: ArchiveTar;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tsize: number;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tsizeComp?: null;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tmode: number;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tuid: number;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tgid: number;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tuname?: string;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tgname?: string;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tatime?: null;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tmtime: Date;\n\n\t/**\n\t * Entry linkname if present.\n\t */\n\tlinkname: string | null;\n\n\t/**\n\t * @inheritdoc\n\t */\n\treadRsrc?: null;\n}\n\n/**\n * EntryTar object.\n */\nexport class EntryTar extends Entry {\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly archive: ArchiveTar;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly size: number;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly sizeComp: null = null;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly mode: number;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly uid: number;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly gid: number;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly uname: string | null;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly gname: string | null;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly atime: null = null;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly mtime: Date;\n\n\t/**\n\t * Entry linkname if present.\n\t */\n\tpublic readonly linkname: string | null;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tprotected readonly _readRsrc: null = null;\n\n\t/**\n\t * EntryTar constructor.\n\t *\n\t * @param info Info object.\n\t */\n\tconstructor(info: Readonly<IEntryInfoTar>) {\n\t\tsuper(info);\n\n\t\tthis.archive = info.archive;\n\t\tthis.size = info.size;\n\t\tthis.mode = info.mode;\n\t\tthis.uid = info.uid;\n\t\tthis.gid = info.gid;\n\t\tthis.uname = info.uname ?? null;\n\t\tthis.gname = info.gname ?? null;\n\t\tthis.mtime = info.mtime;\n\t\tthis.linkname = info.linkname ?? null;\n\t}\n}\n\n/**\n * ArchiveTar object.\n */\nexport class ArchiveTar extends Archive {\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic static readonly FILE_EXTENSIONS: readonly string[] | null = ['.tar'];\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly Entry = EntryTar;\n\n\t/**\n\t * ArchiveTar constructor.\n\t *\n\t * @param path File path.\n\t */\n\tconstructor(path: string) {\n\t\tsuper(path);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async read(itter: (entry: EntryTar) => Promise<unknown>) {\n\t\tawait super.read(itter as Parameters<Archive['read']>[0]);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tprotected async _read(itter: (entry: EntryTar) => Promise<unknown>) {\n\t\t/**\n\t\t * Each itterator.\n\t\t *\n\t\t * @param header Entry header.\n\t\t * @param stream Entry stream.\n\t\t * @returns Recursion hint.\n\t\t */\n\t\tconst each = async (header: IHeader, stream: () => Readable) => {\n\t\t\t// Check type, skip unsupported.\n\t\t\tlet type: PathType;\n\t\t\tswitch (header.type) {\n\t\t\t\tcase 'file': {\n\t\t\t\t\ttype = PathType.FILE;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'symlink': {\n\t\t\t\t\ttype = PathType.SYMLINK;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'directory': {\n\t\t\t\t\ttype = PathType.DIRECTORY;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// These values should always be set.\n\t\t\tconst pathRaw = header.name;\n\t\t\tlet {size} = header;\n\t\t\tconst {mode, uid, gid, mtime, uname, gname} = header;\n\n\t\t\t// Used for symbolic links, convert to a buffer.\n\t\t\tconst linkname = header.linkname ?? null;\n\t\t\tconst linknameBuffer =\n\t\t\t\tlinkname === null ? null : Buffer.from(linkname, 'utf8');\n\n\t\t\tconst readData =\n\t\t\t\ttype === PathType.FILE ? async () => stream() : null;\n\t\t\tconst readSymlink = linknameBuffer\n\t\t\t\t? async () => linknameBuffer\n\t\t\t\t: null;\n\n\t\t\t// If a symbolic link, make it the size of the link data, not 0.\n\t\t\tif (type === PathType.SYMLINK) {\n\t\t\t\tif (!linknameBuffer) {\n\t\t\t\t\tthrow new Error('Internal error');\n\t\t\t\t}\n\t\t\t\tsize = linknameBuffer.length;\n\t\t\t}\n\n\t\t\tconst entry = new this.Entry({\n\t\t\t\tarchive: this,\n\t\t\t\ttype,\n\t\t\t\tpathRaw,\n\t\t\t\tsize,\n\t\t\t\tmode,\n\t\t\t\tuid,\n\t\t\t\tgid,\n\t\t\t\tuname,\n\t\t\t\tgname,\n\t\t\t\tmtime,\n\t\t\t\tlinkname,\n\t\t\t\treadData,\n\t\t\t\treadSymlink\n\t\t\t});\n\t\t\tconst ret = await entry.trigger(itter);\n\t\t\treturn ret === false;\n\t\t};\n\n\t\tlet cancel = false;\n\t\tconst input = createReadStream(this.path);\n\t\tconst {extract} = await itTar();\n\t\tfor await (const {header, body} of extract()(\n\t\t\tthis._decompress(input as unknown as AsyncGenerator<Buffer>)\n\t\t)) {\n\t\t\t// Call handler for each, break off on cancel.\n\t\t\tcancel = await each(header, () =>\n\t\t\t\tstreamFromBufferListGenerator(body)\n\t\t\t);\n\t\t\tif (cancel) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Finish reading the body if not read, get to the next entry.\n\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\twhile (!(await body.next()).done) {\n\t\t\t\t// Do nothing.\n\t\t\t}\n\t\t}\n\n\t\tif (cancel) {\n\t\t\tinput.destroy();\n\t\t}\n\t}\n\n\t/**\n\t * A async buffer generator to decopress if needed.\n\t *\n\t * @param input Buffer generator.\n\t * @yields Decompressed data.\n\t */\n\tprotected async *_decompress(input: AsyncGenerator<Buffer>) {\n\t\t// Plain tar files are not compressed, just pass data through.\n\t\tfor await (const chunk of input) {\n\t\t\tyield chunk;\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]}