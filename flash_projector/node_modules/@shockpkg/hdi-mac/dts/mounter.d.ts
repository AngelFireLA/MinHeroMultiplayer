export interface IMounterOptions {
    /**
     * The path for hdiutil.
     *
     * @default 'hdiutil'
     */
    hdiutil?: string | null;
}
export interface IMounterAttachOptions {
    /**
     * Force the devices to be read-only.
     */
    readonly?: boolean;
    /**
     * Hide any mounted volumes from applications like Finder.
     */
    nobrowse?: boolean;
}
export interface IMounterEjectOptions {
    /**
     * Forcibly detach.
     */
    force?: boolean;
}
export interface IMounterDevice {
    /**
     * The dev-entry hdiutil info.
     */
    devEntry: string;
    /**
     * The potentially-mountable hdiutil info.
     */
    potentiallyMountable: boolean;
    /**
     * The content-hint hdiutil info.
     */
    contentHint?: string;
    /**
     * The unmapped-content-hint hdiutil info.
     */
    unmappedContentHint?: string;
    /**
     * The volume-kind hdiutil info, if present.
     */
    volumeKind?: string;
    /**
     * The mount-point hdiutil info, if present.
     */
    mountPoint?: string;
}
export interface IMounterAttachInfo {
    /**
     * Device list.
     */
    devices: IMounterDevice[];
    /**
     * Eject disk.
     */
    eject(options?: Readonly<IMounterEjectOptions> | null): Promise<void>;
    /**
     * Eject disk.
     */
    ejectSync(options?: Readonly<IMounterEjectOptions> | null): void;
}
/**
 * Mounter object.
 */
export declare class Mounter {
    /**
     * The path to hdiutil.
     */
    hdiutil: string;
    /**
     * Mounter constructor.
     *
     * @param options Options object.
     */
    constructor(options?: Readonly<IMounterOptions> | null);
    /**
     * Attach a disk image.
     *
     * @param file Path to disk image.
     * @param options Options object.
     * @param ejectOnExit Eject on exit options, or null.
     * @returns Info object.
     */
    attach(file: string, options?: Readonly<IMounterAttachOptions> | null, ejectOnExit?: Readonly<IMounterEjectOptions> | null): Promise<IMounterAttachInfo>;
    /**
     * Attach a disk image.
     *
     * @param file Path to disk image.
     * @param options Options object.
     * @param ejectOnExit Eject on exit options, or null.
     * @returns Info object.
     */
    attachSync(file: string, options?: Readonly<IMounterAttachOptions> | null, ejectOnExit?: Readonly<IMounterEjectOptions> | null): IMounterAttachInfo;
    /**
     * Eject a disk image.
     *
     * @param file Path to device file or volume mount point.
     * @param options Options object.
     */
    eject(file: string, options?: Readonly<IMounterEjectOptions> | null): Promise<void>;
    /**
     * Eject a disk image.
     *
     * @param file Path to device file or volume mount point.
     * @param options Options object.
     */
    ejectSync(file: string, options?: Readonly<IMounterEjectOptions> | null): void;
    /**
     * Create args for attach.
     *
     * @param file Path to disk image.
     * @param options Options object.
     * @returns Argument list.
     */
    protected _argsAttach(file: string, options?: Readonly<IMounterAttachOptions> | null): string[];
    /**
     * Create args for eject.
     *
     * @param file Path to device file or volume mount point.
     * @param options Options object.
     * @returns Argument list.
     */
    protected _argsEject(file: string, options?: Readonly<IMounterEjectOptions> | null): string[];
    /**
     * Run hdiutil attach command, returning the devices list on success.
     *
     * @param args CLI args.
     * @returns Devices list.
     */
    protected _runAttach(args: readonly string[]): Promise<IMounterDevice[]>;
    /**
     * Run hdiutil attach command, returning the devices list on success.
     *
     * @param args CLI args.
     * @returns Devices list.
     */
    protected _runAttachSync(args: readonly string[]): IMounterDevice[];
    /**
     * Run hdiutil eject command.
     *
     * @param args CLI args.
     */
    protected _runEject(args: readonly string[]): Promise<void>;
    /**
     * Run hdiutil eject command.
     *
     * @param args CLI args.
     */
    protected _runEjectSync(args: readonly string[]): void;
    /**
     * Create file argument from file path.
     *
     * @param file File path.
     * @returns A path for use as argument.
     */
    protected _fileArg(file: string): string;
    /**
     * Parse devices plist into devices list.
     *
     * @param xml XML plist.
     * @returns Devices list.
     */
    protected _parseDevices(xml: string): IMounterDevice[];
    /**
     * Find the root device, null on empty list.
     *
     * @param devices Device list.
     * @returns Root device or null if an empty list.
     */
    protected _findRootDevice(devices: readonly Readonly<IMounterDevice>[]): IMounterDevice | null;
    /**
     * Create ejects callback from a list of devices.
     *
     * @param devices Device list.
     * @param ejectOnExit Eject on exit options, or null.
     * @returns Callback function.
     */
    protected _createEjects(devices: readonly Readonly<IMounterDevice>[], ejectOnExit?: null): {
        /**
         * The eject callback function.
         *
         * @param options Eject options.
         */
        eject: (options?: IMounterEjectOptions | null) => Promise<void>;
        /**
         * The eject callback function.
         *
         * @param options Eject options.
         */
        ejectSync: (options?: IMounterEjectOptions | null) => void;
    };
}
