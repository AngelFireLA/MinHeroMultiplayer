import { INDENT_STRING } from "../options.mjs";
import { assertXmlTagName, xmlElementText } from "../util.mjs";
import { Value } from "../value.mjs";

/**
 * ValueDate object.
 */
export class ValueDate extends Value {
  /**
   * Value type.
   */
  static TYPE = 'date';

  /**
   * Tag names.
   */
  static TAG_NAMES = ['date'];

  /**
   * Value value.
   */
  value = new Date();

  /**
   * ValueDate constructor.
   *
   * @param value The value.
   */
  constructor(value = new Date()) {
    super();
    this.value = value;
  }

  /**
   * @inheritdoc
   */
  fromXmlElement(element) {
    assertXmlTagName(element, 'date');
    const text = xmlElementText(element)?.nodeValue || '';
    const v = new Date(text);
    const time = v.getTime();
    if (!time && time !== 0) {
      throw new Error(`Invalid date data: ${text}`);
    }
    this.value = v;
  }

  /**
   * @inheritdoc
   */
  toXml(options = null, depth = 0) {
    const p = (options?.indentString ?? INDENT_STRING).repeat(depth);
    const d = this.value.toISOString().replace(/\.\d+/, '');
    return `${p}<date>${d}</date>`;
  }
}
//# sourceMappingURL=date.mjs.map