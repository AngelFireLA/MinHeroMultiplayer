import { INDENT_STRING } from "../options.mjs";
import { assertNoXmlElementChildNodes, assertXmlTagName } from "../util.mjs";
import { Value } from "../value.mjs";

/**
 * ValueBoolean object.
 */
export class ValueBoolean extends Value {
  /**
   * Value type.
   */
  static TYPE = 'boolean';

  /**
   * Tag names.
   */
  static TAG_NAMES = ['true', 'false'];

  /**
   * Value value.
   */
  value = false;

  /**
   * ValueBoolean constructor.
   *
   * @param value The value.
   */
  constructor(value = false) {
    super();
    this.value = value;
  }

  /**
   * @inheritdoc
   */
  fromXmlElement(element) {
    assertNoXmlElementChildNodes(element);
    switch (element.tagName) {
      case 'true':
        {
          this.value = true;
          return;
        }
      case 'false':
        {
          this.value = false;
          return;
        }
      default:
        {
          throw assertXmlTagName(element, '');
        }
    }
  }

  /**
   * @inheritdoc
   */
  toXml(options = null, depth = 0) {
    const p = (options?.indentString ?? INDENT_STRING).repeat(depth);
    return this.value ? `${p}<true/>` : `${p}<false/>`;
  }
}
//# sourceMappingURL=boolean.mjs.map