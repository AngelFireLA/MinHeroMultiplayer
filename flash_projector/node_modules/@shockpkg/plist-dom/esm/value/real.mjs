import { INDENT_STRING } from "../options.mjs";
import { assertXmlTagName, xmlElementText } from "../util.mjs";
import { Value } from "../value.mjs";

/**
 * ValueReal object.
 */
export class ValueReal extends Value {
  /**
   * Value type.
   */
  static TYPE = 'real';

  /**
   * Tag names.
   */
  static TAG_NAMES = ['real'];

  /**
   * Value value.
   */
  value = 0;

  /**
   * ValueReal constructor.
   *
   * @param value The value.
   */
  constructor(value = 0) {
    super();
    this.value = value;
  }

  /**
   * @inheritdoc
   */
  fromXmlElement(element) {
    assertXmlTagName(element, 'real');
    const text = xmlElementText(element)?.nodeValue || '';
    if (!/^[+-]?(\d+|\d*\.\d+)$/.test(text)) {
      throw new Error(`Invalid real data: ${text}`);
    }
    this.value = +text;
  }

  /**
   * @inheritdoc
   */
  toXml(options = null, depth = 0) {
    const p = (options?.indentString ?? INDENT_STRING).repeat(depth);
    const v = this.value;
    return `${p}<real>${v}</real>`;
  }
}
//# sourceMappingURL=real.mjs.map