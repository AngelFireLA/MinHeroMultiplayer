import { DATA_COLUMNS, INDENT_STRING, NEWLINE_STRING } from "../options.mjs";
import { assertXmlTagName, base64Decode, base64Encode, xmlElementText } from "../util.mjs";
import { Value } from "../value.mjs";

/**
 * ValueData object.
 */
export class ValueData extends Value {
  /**
   * Value type.
   */
  static TYPE = 'data';

  /**
   * Tag names.
   */
  static TAG_NAMES = ['data'];

  /**
   * Value value.
   */

  /**
   * ValueData constructor.
   *
   * @param value The value.
   */
  constructor(value = new Uint8Array(0)) {
    super();
    this.value = value;
  }

  /**
   * @inheritdoc
   */
  fromXmlElement(element) {
    assertXmlTagName(element, 'data');
    const text = xmlElementText(element)?.nodeValue || '';
    this.value = base64Decode(text);
  }

  /**
   * @inheritdoc
   */
  toXml(options = null, depth = 0) {
    const n = options?.newlineString ?? NEWLINE_STRING;
    const c = options?.dataColumns ?? DATA_COLUMNS;
    const p = (options?.indentString ?? INDENT_STRING).repeat(depth);
    let r = `${p}<data>`;
    if (c > 0) {
      for (let s = base64Encode(this.value); s; s = s.slice(c)) {
        r += `${n}${p}${s.slice(0, c)}`;
      }
    } else {
      r += `${n}${p}${base64Encode(this.value)}`;
    }
    r += `${n}${p}</data>`;
    return r;
  }
}
//# sourceMappingURL=data.mjs.map