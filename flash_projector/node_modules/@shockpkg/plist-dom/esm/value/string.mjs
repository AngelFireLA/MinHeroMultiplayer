import { INDENT_STRING } from "../options.mjs";
import { assertXmlTagName, xmlElementText } from "../util.mjs";
import { Value } from "../value.mjs";

/**
 * ValueString object.
 */
export class ValueString extends Value {
  /**
   * Value type.
   */
  static TYPE = 'string';

  /**
   * Tag names.
   */
  static TAG_NAMES = ['string'];

  /**
   * Value value.
   */
  value = '';

  /**
   * ValueString constructor.
   *
   * @param value The value.
   */
  constructor(value = '') {
    super();
    this.value = value;
  }

  /**
   * @inheritdoc
   */
  fromXmlElement(element) {
    assertXmlTagName(element, 'string');
    this.value = xmlElementText(element)?.nodeValue || '';
  }

  /**
   * @inheritdoc
   */
  toXml(options = null, depth = 0) {
    const p = (options?.indentString ?? INDENT_STRING).repeat(depth);
    const e = this.value.replaceAll('&', '&amp;').replaceAll('<', '&lt;').replaceAll('>', '&gt;');
    return `${p}<string>${e}</string>`;
  }
}
//# sourceMappingURL=string.mjs.map