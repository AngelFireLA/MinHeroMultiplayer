import { IToXmlOptions } from '../options.ts';
import { IElement } from '../util.ts';
import { Value } from '../value.ts';
/**
 * ValueDict object.
 */
export declare class ValueDict extends Value {
    /**
     * Value type.
     */
    static readonly TYPE = "dict";
    /**
     * Tag names.
     */
    static readonly TAG_NAMES: string[];
    /**
     * Child tag names.
     *
     * @returns Child tag names map.
     */
    static get CHILD_TAG_NAMES(): Readonly<Map<string, new () => Value>>;
    /**
     * Value value.
     */
    value: Map<string, Value>;
    /**
     * ValueDict constructor.
     *
     * @param value The value.
     */
    constructor(value?: Map<string, Value>);
    /**
     * Dictionary size.
     *
     * @returns The size.
     */
    get size(): number;
    /**
     * Check if key exists.
     *
     * @param key Dictionary key.
     * @returns The value or null.
     */
    has(key: string): boolean;
    /**
     * Get value for key or null if does not exist.
     *
     * @param key Dictionary key.
     * @returns The value or null.
     */
    get(key: string): Value | null;
    /**
     * Get value for key or throw.
     *
     * @param key Dictionary key.
     * @returns The value.
     */
    getValue(key: string): Value;
    /**
     * Set value for key.
     *
     * @param key Dictionary key.
     * @param value Value object.
     */
    set(key: string, value: Value): void;
    /**
     * Delete value for key.
     *
     * @param key Dictionary key.
     */
    delete(key: string): void;
    /**
     * Clear dictionary.
     */
    clear(): void;
    /**
     * @inheritdoc
     */
    fromXmlElement(element: Readonly<IElement>): void;
    /**
     * Decode child element from XML element.
     *
     * @param element XML element.
     * @returns Value element.
     */
    childFromXmlElement(element: Readonly<IElement>): Value;
    /**
     * @inheritdoc
     */
    toXml(options?: Readonly<IToXmlOptions> | null, depth?: number): string;
}
