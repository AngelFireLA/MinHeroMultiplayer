"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ValueData = void 0;
var _options = require("../options.js");
var _util = require("../util.js");
var _value = require("../value.js");
/**
 * ValueData object.
 */
class ValueData extends _value.Value {
  /**
   * Value type.
   */
  static TYPE = 'data';

  /**
   * Tag names.
   */
  static TAG_NAMES = ['data'];

  /**
   * Value value.
   */

  /**
   * ValueData constructor.
   *
   * @param value The value.
   */
  constructor(value = new Uint8Array(0)) {
    super();
    this.value = value;
  }

  /**
   * @inheritdoc
   */
  fromXmlElement(element) {
    (0, _util.assertXmlTagName)(element, 'data');
    const text = (0, _util.xmlElementText)(element)?.nodeValue || '';
    this.value = (0, _util.base64Decode)(text);
  }

  /**
   * @inheritdoc
   */
  toXml(options = null, depth = 0) {
    const n = options?.newlineString ?? _options.NEWLINE_STRING;
    const c = options?.dataColumns ?? _options.DATA_COLUMNS;
    const p = (options?.indentString ?? _options.INDENT_STRING).repeat(depth);
    let r = `${p}<data>`;
    if (c > 0) {
      for (let s = (0, _util.base64Encode)(this.value); s; s = s.slice(c)) {
        r += `${n}${p}${s.slice(0, c)}`;
      }
    } else {
      r += `${n}${p}${(0, _util.base64Encode)(this.value)}`;
    }
    r += `${n}${p}</data>`;
    return r;
  }
}
exports.ValueData = ValueData;
//# sourceMappingURL=data.js.map