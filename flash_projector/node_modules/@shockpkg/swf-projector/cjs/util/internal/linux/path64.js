"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.path64 = exports.PatchPath64 = void 0;
var _asm = require("./asm.js");
var _path = require("./path.js");
/* eslint-disable max-classes-per-file */

/**
 * PatchPath64 object.
 */
class PatchPath64 extends _path.PatchPath {}

/**
 * PatchPath64File object.
 */
exports.PatchPath64 = PatchPath64;
class PatchPath64File extends PatchPath64 {
  /**
   * Fuzzy find.
   */

  /**
   * Address offset.
   */

  _addr_ = 0n;
  _remap_ = 0n;

  /**
   * @inheritDoc
   */
  check() {
    const {
      _find: find,
      _offset: o
    } = this;
    for (const [shdr, i, d] of this._findFuzzyCode(find)) {
      const v = new DataView(d.buffer, d.byteOffset, d.byteLength);
      const addr = shdr.shAddr + BigInt(i);
      const rip = addr + 10n;
      const ptr = rip + BigInt(v.getUint32(i + o, true));
      const remap = this._getRemap(ptr);
      if (!remap) {
        continue;
      }
      if (this._addr_) {
        return false;
      }
      this._addr_ = addr;
      this._remap_ = remap;
    }
    return !!this._addr_;
  }

  /**
   * @inheritDoc
   */
  patch() {
    const {
      _offset: o
    } = this;
    const addr = this._addr_;
    const shdr = this._theShdrForAddress(addr);
    const v = new DataView(shdr.data);
    const i = Number(addr - shdr.shAddr);
    const rip = shdr.shAddr + BigInt(i + 10);
    v.setUint32(i + o, Number(this._remap_ - rip), true);
  }
}

/**
 * Patch objects.
 */
const path64 = exports.path64 = [
/**
 * 24.0.0.186 x86_64.
 */
class extends PatchPath64File {
  /**
   * @inheritDoc
   */
  _find = _asm.PATH_X8664[24];

  /**
   * @inheritDoc
   */
  _offset = 6;
}];
//# sourceMappingURL=path64.js.map