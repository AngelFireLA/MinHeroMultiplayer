"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.offset64 = exports.PatchOffset64 = void 0;
var _patch = require("../patch.js");
var _asm = require("./asm.js");
var _patch2 = require("./patch.js");
/* eslint-disable max-classes-per-file */

/**
 * Patch offset 64-bit spec.
 */

/**
 * PatchOffset64 object.
 * Replace the bad ELF header reading logic with new logic.
 * The code was never updated from the old 32-bit code and is not accurate.
 */
class PatchOffset64 extends _patch2.Patch {
  /**
   * Patch spec.
   */

  _replace_ = [];

  /**
   * @inheritDoc
   */
  check() {
    this._replace_ = [];
    const {
      find,
      replace
    } = this._spec;
    const rep = [];
    for (const [, i, d] of this._findFuzzyCode(find)) {
      if (rep.length) {
        return false;
      }
      rep.push([d, i, replace]);
    }
    if (rep.length !== 1) {
      return false;
    }
    this._replace_ = rep;
    return true;
  }

  /**
   * @inheritDoc
   */
  patch() {
    for (const [d, i, f] of this._replace_) {
      (0, _patch.writeFuzzy)(d, i, f);
    }
  }
}

/**
 * Patch objects.
 */
exports.PatchOffset64 = PatchOffset64;
const offset64 = exports.offset64 = [
/**
 * 24.0.0.186 x86_64.
 */
class extends PatchOffset64 {
  /**
   * @inheritDoc
   */
  _spec = {
    find: _asm.OFFSET_X8664['24-a'],
    replace: _asm.OFFSET_X8664['24-b']
  };
},
/**
 * 25.0.0.127 x86_64.
 */
class extends PatchOffset64 {
  /**
   * @inheritDoc
   */
  _spec = {
    find: _asm.OFFSET_X8664['25-a'],
    replace: _asm.OFFSET_X8664['25-b']
  };
},
/**
 * 32.0.0.293 x86_64.
 */
class extends PatchOffset64 {
  /**
   * @inheritDoc
   */
  _spec = {
    find: _asm.OFFSET_X8664['32-a'],
    replace: _asm.OFFSET_X8664['32-b']
  };
}];
//# sourceMappingURL=offset64.js.map