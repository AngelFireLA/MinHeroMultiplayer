{"version":3,"file":"linux.js","names":["_util","require","_data","_elf","_title","_title2","_menu","_menu2","_path","_path2","_offset","add","a","b","linuxProjectorAddSection","elf","data","te","TextEncoder","aligned","secnameData","secnameDataD","encode","secnameDataS","length","secnameEof","secnameEofD","secnameEofS","secdata","ArrayBuffer","align","Uint8Array","set","phdrLoadLast","phdr","programHeaders","pType","PT_LOAD","pVaddr","Error","origPhdrLoadEndM","pMemsz","origPhdrLoadEndF","pOffset","pFilesz","endM","endF","allowBssAfterLoadData","bits","shdr","sectionHeaders","shType","SHT_STRTAB","shFlags","SHF_ALLOC","findIndex","insertI","secnameI","unloaded","i","shAddr","shName","shSize","SHT_NOBITS","shOffset","fileSize","push","sort","Number","shtrndx","elfHeader","eShtrndx","d","newData","byteLength","BigInt","sectionOffset","sectionAddrOffset","dataSection","eofSection","dataS","Elf64Shdr","SHT_PROGBITS","shLink","shInfo","shAddralign","shEntsize","splice","eofS","size","Elf32Shdr","eShnum","eShoff","linuxProjectorPatch","options","patchWindowTitle","patchMenuRemove","patchProjectorPath","patchProjectorOffset","e","decode","DataView","buffer","byteOffset","patchers","titleData","titleA","titleL","patches","title64","map","Patch","title32","menu64","menu32","path64","path32","offset64","type","found","patch","check","encoded","linuxLauncher","launcher"],"sources":["../../src/util/linux.ts"],"sourcesContent":["import {launcher} from '../util.ts';\n\nimport {align, findIndex} from './internal/data.ts';\nimport {\n\tdecode,\n\tElf32,\n\tElf32Shdr,\n\tElf64,\n\tElf64Shdr,\n\tPT_LOAD,\n\tSHF_ALLOC,\n\tSHT_NOBITS,\n\tSHT_PROGBITS,\n\tSHT_STRTAB\n} from './internal/linux/elf.ts';\nimport {Patch} from './internal/linux/patch.ts';\nimport {title64} from './internal/linux/title64.ts';\nimport {title32} from './internal/linux/title32.ts';\nimport {menu64} from './internal/linux/menu64.ts';\nimport {menu32} from './internal/linux/menu32.ts';\nimport {path64} from './internal/linux/path64.ts';\nimport {path32} from './internal/linux/path32.ts';\nimport {offset64} from './internal/linux/offset64.ts';\n\n/**\n * Add two numbers of bigints assuming same type.\n *\n * @param a A number of bigint.\n * @param b A number of bigint.\n * @returns A number of bigint.\n */\nfunction add(a: number | bigint, b: number | bigint) {\n\treturn ((a as number) + (b as number)) as number | bigint;\n}\n\n/**\n * Add a data section to an existring ELF.\n *\n * @param elf Elf object.\n * @param data New data.\n * @returns Inserted section.\n */\nfunction linuxProjectorAddSection(\n\telf: Elf32 | Elf64,\n\tdata: Readonly<Uint8Array>\n) {\n\tconst te = new TextEncoder();\n\tconst aligned = 64;\n\tconst secnameData = '.shockpkg.data';\n\tconst secnameDataD = te.encode(`${secnameData}\\0`);\n\tconst secnameDataS = secnameDataD.length;\n\tconst secnameEof = '.shockpkg.eof';\n\tconst secnameEofD = te.encode(`${secnameEof}\\0`);\n\tconst secnameEofS = secnameEofD.length;\n\tconst secdata = new ArrayBuffer(align(data.length, aligned));\n\tnew Uint8Array(secdata).set(data);\n\n\t// Get the highest PT_LOAD program header, sanity checked.\n\tlet phdrLoadLast = null;\n\tfor (const phdr of elf.programHeaders) {\n\t\tif (\n\t\t\tphdr.pType === PT_LOAD &&\n\t\t\t(phdrLoadLast === null || phdr.pVaddr >= phdrLoadLast.pVaddr)\n\t\t) {\n\t\t\tphdrLoadLast = phdr;\n\t\t}\n\t}\n\tif (!phdrLoadLast) {\n\t\tthrow new Error('No PT_LOAD program headers');\n\t}\n\tconst origPhdrLoadEndM = add(phdrLoadLast.pVaddr, phdrLoadLast.pMemsz);\n\tconst origPhdrLoadEndF = add(phdrLoadLast.pOffset, phdrLoadLast.pFilesz);\n\tfor (const phdr of elf.programHeaders) {\n\t\tconst endM = add(phdr.pVaddr, phdr.pMemsz);\n\t\tif (endM > origPhdrLoadEndM) {\n\t\t\tthrow new Error('Program header memory after PT_LOAD');\n\t\t}\n\t\tconst endF = add(phdr.pOffset, phdr.pFilesz);\n\t\tif (endF > origPhdrLoadEndF) {\n\t\t\tthrow new Error('Program header data after PT_LOAD');\n\t\t}\n\t}\n\n\t// The .bss section header in 6.0.79.0 is weird.\n\tlet allowBssAfterLoadData = false;\n\tif (elf.bits !== 64) {\n\t\tfor (const shdr of elf.sectionHeaders) {\n\t\t\tif (shdr.shType !== SHT_STRTAB || shdr.shFlags !== SHF_ALLOC) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Only FP6 uses this older library.\n\t\t\tallowBssAfterLoadData =\n\t\t\t\tfindIndex(\n\t\t\t\t\tnew Uint8Array(shdr.data),\n\t\t\t\t\tte.encode('libgtk-1.2.so.0')\n\t\t\t\t) >= 0;\n\t\t}\n\t}\n\n\t// List the trailing unloaded section headers, sanity checked.\n\tlet insertI = 0;\n\tlet secnameI = 0;\n\tconst unloaded = [];\n\tfor (let i = 0; i < elf.sectionHeaders.length; i++) {\n\t\tconst shdr = elf.sectionHeaders[i];\n\t\tif (shdr.shAddr) {\n\t\t\tinsertI = i + 1;\n\t\t\tsecnameI = shdr.shName;\n\t\t\tif (add(shdr.shAddr, shdr.shSize) > origPhdrLoadEndM) {\n\t\t\t\tthrow new Error('Loaded section memory after PT_LOAD');\n\t\t\t}\n\t\t\tif (\n\t\t\t\t!(allowBssAfterLoadData && shdr.shType === SHT_NOBITS) &&\n\t\t\t\tadd(shdr.shOffset, shdr.fileSize) > origPhdrLoadEndF\n\t\t\t) {\n\t\t\t\tthrow new Error('Loaded section data after PT_LOAD');\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tif (shdr.shOffset) {\n\t\t\tif (shdr.shOffset < origPhdrLoadEndF) {\n\t\t\t\tthrow new Error('Unloaded section data before end PT_LOAD');\n\t\t\t}\n\t\t\tunloaded.push(shdr);\n\t\t}\n\t}\n\tunloaded.sort((a, b) => Number(add(a.shOffset, -b.shOffset)));\n\tconst shtrndx = elf.sectionHeaders[elf.elfHeader.eShtrndx];\n\tfor (const d = new Uint8Array(shtrndx.data); d[secnameI++]; );\n\n\t// Insert new section names.\n\tconst newData = new ArrayBuffer(\n\t\tshtrndx.data.byteLength + secnameDataS + secnameEofS\n\t);\n\t{\n\t\tconst data = new Uint8Array(newData);\n\t\tlet i = 0;\n\t\tfor (const a of [\n\t\t\tnew Uint8Array(shtrndx.data, 0, secnameI),\n\t\t\tsecnameDataD,\n\t\t\tsecnameEofD,\n\t\t\tnew Uint8Array(shtrndx.data, secnameI)\n\t\t]) {\n\t\t\tdata.set(a, i);\n\t\t\ti += a.length;\n\t\t}\n\t}\n\tshtrndx.data = newData;\n\tshtrndx.shSize =\n\t\telf.bits === 64\n\t\t\t? BigInt(shtrndx.data.byteLength)\n\t\t\t: shtrndx.data.byteLength;\n\tfor (const shdr of elf.sectionHeaders) {\n\t\tif (shdr.shName >= secnameI) {\n\t\t\tshdr.shName += secnameDataS + secnameEofS;\n\t\t}\n\t}\n\n\t// Insert new sections and section data.\n\tlet sectionOffset = Number(add(phdrLoadLast.pOffset, phdrLoadLast.pMemsz));\n\tsectionOffset = align(sectionOffset, 64);\n\tconst sectionAddrOffset = sectionOffset - Number(phdrLoadLast.pOffset);\n\tlet dataSection = null;\n\tlet eofSection = null;\n\tif (elf.bits === 64) {\n\t\tconst dataS = new Elf64Shdr();\n\t\tdataS.shName = secnameI;\n\t\tdataS.shType = SHT_PROGBITS;\n\t\tdataS.shFlags = BigInt(SHF_ALLOC);\n\t\tdataS.shAddr = BigInt(phdrLoadLast.pVaddr) + BigInt(sectionAddrOffset);\n\t\tdataS.shOffset = BigInt(sectionOffset);\n\t\tdataS.shSize = BigInt(secdata.byteLength);\n\t\tdataS.shLink = 0;\n\t\tdataS.shInfo = 0;\n\t\tdataS.shAddralign = BigInt(aligned);\n\t\tdataS.shEntsize = 0n;\n\t\tdataS.data = secdata;\n\t\telf.sectionHeaders.splice(insertI, 0, dataS);\n\t\tdataSection = dataS;\n\n\t\tconst eofS = new Elf64Shdr();\n\t\teofS.shName = secnameI + secnameDataS;\n\t\teofS.shType = SHT_PROGBITS;\n\t\teofS.shFlags = 0n;\n\t\teofS.shAddr = 0n;\n\t\teofS.shOffset = BigInt(elf.size);\n\t\teofS.shSize = 0n;\n\t\teofS.shLink = 0;\n\t\teofS.shInfo = 0;\n\t\teofS.shAddralign = 1n;\n\t\teofS.shEntsize = 0n;\n\t\telf.sectionHeaders.splice(insertI + 1, 0, eofS);\n\t\teofSection = eofS;\n\t} else {\n\t\tconst dataS = new Elf32Shdr();\n\t\tdataS.shName = secnameI;\n\t\tdataS.shType = SHT_PROGBITS;\n\t\tdataS.shFlags = SHF_ALLOC;\n\t\tdataS.shAddr = Number(phdrLoadLast.pVaddr) + sectionAddrOffset;\n\t\tdataS.shOffset = sectionOffset;\n\t\tdataS.shSize = secdata.byteLength;\n\t\tdataS.shLink = 0;\n\t\tdataS.shInfo = 0;\n\t\tdataS.shAddralign = aligned;\n\t\tdataS.shEntsize = 0;\n\t\tdataS.data = secdata;\n\t\telf.sectionHeaders.splice(insertI, 0, dataS);\n\t\tdataSection = dataS;\n\n\t\tconst eofS = new Elf32Shdr();\n\t\teofS.shName = secnameI + secnameDataS;\n\t\teofS.shType = SHT_PROGBITS;\n\t\teofS.shFlags = 0;\n\t\teofS.shAddr = 0;\n\t\teofS.shOffset = elf.size;\n\t\teofS.shSize = 0;\n\t\teofS.shLink = 0;\n\t\teofS.shInfo = 0;\n\t\teofS.shAddralign = 1;\n\t\telf.sectionHeaders.splice(insertI + 1, 0, eofS);\n\t\teofSection = eofS;\n\t}\n\telf.elfHeader.eShnum += 2;\n\tif (insertI <= elf.elfHeader.eShtrndx) {\n\t\telf.elfHeader.eShtrndx += 2;\n\t}\n\tsectionOffset += secdata.byteLength;\n\n\t// Extend load header to cover the new section.\n\tphdrLoadLast.pFilesz = phdrLoadLast.pMemsz =\n\t\telf.bits === 64\n\t\t\t? BigInt(sectionOffset - Number(phdrLoadLast.pOffset))\n\t\t\t: sectionOffset - Number(phdrLoadLast.pOffset);\n\n\t// Shift the unloaded section data and the section table forward.\n\tfor (const shdr of unloaded) {\n\t\tif (shdr.shOffset < origPhdrLoadEndF) {\n\t\t\tcontinue;\n\t\t}\n\t\tsectionOffset = align(sectionOffset, Number(shdr.shAddralign));\n\t\t// eslint-disable-next-line unicorn/prefer-ternary\n\t\tif (elf.bits === 64) {\n\t\t\tshdr.shOffset = BigInt(sectionOffset);\n\t\t} else {\n\t\t\tshdr.shOffset = Number(sectionOffset);\n\t\t}\n\t\tsectionOffset += Number(shdr.fileSize);\n\t}\n\tsectionOffset = align(sectionOffset, 16);\n\t// eslint-disable-next-line unicorn/prefer-ternary\n\tif (elf.bits === 64) {\n\t\telf.elfHeader.eShoff = BigInt(sectionOffset);\n\t} else {\n\t\telf.elfHeader.eShoff = Number(sectionOffset);\n\t}\n\n\t// Linux projectors expect a section to cover the headers.\n\t// This is how the code finds the appended projector data.\n\t// For i386 the .bss section happens to do this before being modified.\n\t// For x86_64 this assumption is one of reasons that projectors are broken.\n\t// After the above modifications that poor assumption breaks.\n\t// To companstate update the added unloaded section to point to the end.\n\teofSection.shOffset = elf.bits === 64 ? BigInt(elf.size) : elf.size;\n\n\treturn dataSection;\n}\n\n/**\n * Linux projector patch.\n */\nexport interface ILinuxProjectorPatch {\n\t/**\n\t * Attempt to replace the window title if not null.\n\t *\n\t * @default null\n\t */\n\tpatchWindowTitle?: string | null;\n\n\t/**\n\t * Attempt to patch out application menu.\n\t *\n\t * @default false\n\t */\n\tpatchMenuRemove?: boolean;\n\n\t/**\n\t * Attempt to patch the projector path reading code.\n\t *\n\t * @default false\n\t */\n\tpatchProjectorPath?: boolean;\n\n\t/**\n\t * Attempt to patch the projector offset reading code.\n\t *\n\t * @default false\n\t */\n\tpatchProjectorOffset?: boolean;\n}\n\n/**\n * Apply patches to projector.\n *\n * @param elf Projector data.\n * @param options Patch options.\n * @returns Patched projector.\n */\nexport function linuxProjectorPatch(\n\telf: Readonly<Uint8Array>,\n\toptions: Readonly<ILinuxProjectorPatch>\n) {\n\tconst {\n\t\tpatchWindowTitle,\n\t\tpatchMenuRemove,\n\t\tpatchProjectorPath,\n\t\tpatchProjectorOffset\n\t} = options;\n\n\tconst e = decode(new DataView(elf.buffer, elf.byteOffset, elf.byteLength));\n\n\tconst patchers = [] as [string, Patch<Elf32 | Elf64>[]][];\n\tif (typeof patchWindowTitle === 'string') {\n\t\tconst titleData = new TextEncoder().encode(`${patchWindowTitle}\\0`);\n\t\tconst shdr = linuxProjectorAddSection(e, titleData);\n\t\tconst titleA = shdr.shAddr;\n\t\tconst titleL = titleData.length - 1;\n\n\t\tconst patches =\n\t\t\te.bits === 64\n\t\t\t\t? title64.map(Patch => new Patch(e, titleA as bigint, titleL))\n\t\t\t\t: title32.map(Patch => new Patch(e, titleA as number, titleL));\n\t\tpatchers.push(['Window Title', patches]);\n\t}\n\n\tif (patchMenuRemove) {\n\t\tconst patches =\n\t\t\te.bits === 64\n\t\t\t\t? menu64.map(Patch => new Patch(e))\n\t\t\t\t: menu32.map(Patch => new Patch(e));\n\t\tpatchers.push(['Menu Remove', patches]);\n\t}\n\n\tif (patchProjectorPath) {\n\t\tconst patches =\n\t\t\te.bits === 64\n\t\t\t\t? path64.map(Patch => new Patch(e))\n\t\t\t\t: path32.map(Patch => new Patch(e));\n\t\tpatchers.push(['Projector Path', patches]);\n\t}\n\n\tif (patchProjectorOffset) {\n\t\tif (e.bits === 64) {\n\t\t\tconst patches = offset64.map(Patch => new Patch(e));\n\t\t\tpatchers.push(['Projector Offset', patches]);\n\t\t} else {\n\t\t\tthrow new Error('Invalid configuration');\n\t\t}\n\t}\n\n\tfor (const [type, patches] of patchers) {\n\t\tlet found = null;\n\t\tfor (const patch of patches) {\n\t\t\tif (patch.check()) {\n\t\t\t\tif (found) {\n\t\t\t\t\tthrow new Error(`Multiple patch candidates for: ${type}`);\n\t\t\t\t}\n\t\t\t\tfound = patch;\n\t\t\t}\n\t\t}\n\t\tif (!found) {\n\t\t\tthrow new Error(`No patch candidates for: ${type}`);\n\t\t}\n\t\tfound.patch();\n\t}\n\n\treturn new Uint8Array(e.encoded());\n}\n\n/**\n * Get Linux launcher for the specified type.\n *\n * @param type Executable type.\n * @returns Launcher data.\n */\nexport async function linuxLauncher(type: 'i386' | 'x86_64') {\n\tswitch (type) {\n\t\tcase 'i386': {\n\t\t\treturn launcher('linux-i386');\n\t\t}\n\t\tcase 'x86_64': {\n\t\t\treturn launcher('linux-x86_64');\n\t\t}\n\t\tdefault: {\n\t\t\tthrow new Error(`Invalid type: ${type as string}`);\n\t\t}\n\t}\n}\n"],"mappings":"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","ignoreList":[]}