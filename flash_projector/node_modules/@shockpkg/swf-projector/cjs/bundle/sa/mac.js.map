{"version":3,"file":"mac.js","names":["_promises","require","_nodePath","_archiveFiles","_plistDom","_util","_mac","_mac2","_sa","BundleSaMac","BundleSa","constructor","path","flat","projector","_createProjector","extension","_getLauncherName","trimExtension","basename","_getProjectorPathNested","projName","pathJoin","ProjectorSaMac","_getProjectorPath","_writeLauncher","appContents","appMacOS","appResources","appInfoPlist","appPkgInfo","plist","Plist","fromXml","readFile","infoPlistPath","dict","getValue","castAs","ValueDict","projBinaryName","ValueString","value","projBinaryPath","getBinaryPath","projBinaryTypes","machoTypesFile","projIconName","projIconPath","getIconPath","projPkgInfoPath","pkgInfoPath","launcherName","launcherPath","mkdir","dirname","recursive","writeFile","machoAppLauncher","mode","stat","pathIcon","fsLstatExists","copyFile","set","toXml","exports"],"sources":["../../../src/bundle/sa/mac.ts"],"sourcesContent":["import {copyFile, mkdir, readFile, stat, writeFile} from 'node:fs/promises';\nimport {join as pathJoin, basename, dirname} from 'node:path';\n\nimport {fsLstatExists} from '@shockpkg/archive-files';\nimport {Plist, ValueDict, ValueString} from '@shockpkg/plist-dom';\n\nimport {trimExtension} from '../../util.ts';\nimport {machoTypesFile, machoAppLauncher} from '../../util/mac.ts';\nimport {ProjectorSaMac} from '../../projector/sa/mac.ts';\nimport {BundleSa} from '../sa.ts';\n\n/**\n * BundleSaMac object.\n */\nexport class BundleSaMac extends BundleSa {\n\t/**\n\t * ProjectorSaMac instance.\n\t */\n\tpublic readonly projector: ProjectorSaMac;\n\n\t/**\n\t * BundleSaMac constructor.\n\t *\n\t * @param path Output path for the main application.\n\t * @param flat Flat bundle.\n\t */\n\tconstructor(path: string, flat = false) {\n\t\tsuper(path, flat);\n\n\t\tthis.projector = this._createProjector();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get extension() {\n\t\treturn '.app';\n\t}\n\n\t/**\n\t * Get the launcher name.\n\t *\n\t * @returns Launcher name.\n\t */\n\tprotected _getLauncherName() {\n\t\treturn trimExtension(basename(this.path), this.extension, true);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tprotected _getProjectorPathNested(): string {\n\t\tconst projName = `${this._getLauncherName()}${this.extension}`;\n\t\treturn pathJoin(this.path, 'Contents', 'Resources', projName);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tprotected _createProjector() {\n\t\treturn new ProjectorSaMac(this._getProjectorPath());\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tprotected async _writeLauncher() {\n\t\tconst {path, projector} = this;\n\n\t\t// Create paths to things to create.\n\t\tconst appContents = pathJoin(path, 'Contents');\n\t\tconst appMacOS = pathJoin(appContents, 'MacOS');\n\t\tconst appResources = pathJoin(appContents, 'Resources');\n\t\tconst appInfoPlist = pathJoin(appContents, 'Info.plist');\n\t\tconst appPkgInfo = pathJoin(appContents, 'PkgInfo');\n\n\t\t// Read the projector Info.plist.\n\t\tconst plist = new Plist();\n\t\tplist.fromXml(await readFile(projector.infoPlistPath, 'utf8'));\n\t\tconst dict = plist.getValue().castAs(ValueDict);\n\n\t\t// Get the binary path and read the types.\n\t\tconst projBinaryName = dict\n\t\t\t.getValue('CFBundleExecutable')\n\t\t\t.castAs(ValueString).value;\n\t\tconst projBinaryPath = projector.getBinaryPath(projBinaryName);\n\t\tconst projBinaryTypes = await machoTypesFile(projBinaryPath);\n\n\t\t// Get the icon path.\n\t\tconst projIconName = dict\n\t\t\t.getValue('CFBundleIconFile')\n\t\t\t.castAs(ValueString).value;\n\t\tconst projIconPath = projector.getIconPath(projIconName);\n\n\t\t// Get the PkgInfo path.\n\t\tconst projPkgInfoPath = projector.pkgInfoPath;\n\n\t\t// Create the launcher binary with the same types and mode.\n\t\tconst launcherName = this._getLauncherName();\n\t\tconst launcherPath = pathJoin(appMacOS, launcherName);\n\t\tawait mkdir(dirname(launcherPath), {recursive: true});\n\t\tawait writeFile(launcherPath, await machoAppLauncher(projBinaryTypes), {\n\t\t\tmode: (await stat(projBinaryPath)).mode\n\t\t});\n\n\t\t// Copy the projector icon if present.\n\t\tconst pathIcon = pathJoin(appResources, projIconName);\n\t\tif (await fsLstatExists(projIconPath)) {\n\t\t\tawait copyFile(projIconPath, pathIcon);\n\t\t}\n\n\t\t// Copy PkgInfo if present.\n\t\tif (await fsLstatExists(projPkgInfoPath)) {\n\t\t\tawait copyFile(projPkgInfoPath, appPkgInfo);\n\t\t}\n\n\t\t// Update the executable name in the plist for the launcher.\n\t\tdict.set('CFBundleExecutable', new ValueString(launcherName));\n\n\t\t// Write the updated Info.plist.\n\t\tawait mkdir(dirname(appInfoPlist), {recursive: true});\n\t\tawait writeFile(appInfoPlist, plist.toXml(), 'utf8');\n\t}\n}\n"],"mappings":"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","ignoreList":[]}