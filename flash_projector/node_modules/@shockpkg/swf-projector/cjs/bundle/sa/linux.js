"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BundleSaLinux = void 0;
var _promises = require("node:fs/promises");
var _nodePath = require("node:path");
var _linux = require("../../util/linux.js");
var _elf = require("../../util/internal/linux/elf.js");
var _linux2 = require("../../projector/sa/linux.js");
var _sa = require("../sa.js");
/**
 * BundleSaLinux object.
 */
class BundleSaLinux extends _sa.BundleSa {
  /**
   * ProjectorSaLinux instance.
   */

  /**
   * BundleSaLinux constructor.
   *
   * @param path Output path for the main application.
   * @param flat Flat bundle.
   */
  constructor(path, flat = false) {
    super(path, flat);
    this.projector = this._createProjector();
  }

  /**
   * @inheritdoc
   */
  get extension() {
    return '';
  }

  /**
   * @inheritdoc
   */
  _getProjectorPathNested() {
    const {
      path
    } = this;
    return (0, _nodePath.join)(`${path}.data`, (0, _nodePath.basename)(path));
  }

  /**
   * @inheritdoc
   */
  _createProjector() {
    return new _linux2.ProjectorSaLinux(this._getProjectorPath());
  }

  /**
   * @inheritdoc
   */
  async _writeLauncher() {
    const {
      path,
      projector
    } = this;
    let stat = null;
    const d = new Uint8Array(2);
    const v = new DataView(d.buffer, d.byteOffset, d.byteLength);
    const f = await (0, _promises.open)(projector.path, 'r');
    try {
      stat = await f.stat();
      const r = await f.read(d, 0, 2, 18);
      if (r.bytesRead < 2) {
        throw new Error('Unknown format');
      }
    } finally {
      await f.close();
    }
    const machine = v.getUint16(0, true);
    let launcher = null;
    switch (machine) {
      case _elf.EM_386:
        {
          launcher = await (0, _linux.linuxLauncher)('i386');
          break;
        }
      case _elf.EM_X86_64:
        {
          launcher = await (0, _linux.linuxLauncher)('x86_64');
          break;
        }
      default:
        {
          throw new Error(`Unknown machine type: ${machine}`);
        }
    }
    await (0, _promises.mkdir)((0, _nodePath.dirname)(path), {
      recursive: true
    });
    await (0, _promises.writeFile)(path, launcher, {
      mode: stat.mode
    });
  }
}
exports.BundleSaLinux = BundleSaLinux;
//# sourceMappingURL=linux.js.map