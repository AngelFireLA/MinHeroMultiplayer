"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProjectorHtml = void 0;
var _nodePath = require("node:path");
var _promises = require("node:fs/promises");
var _projector = require("../projector.js");
var _util = require("../util.js");
/**
 * ProjectorHtml object.
 */
class ProjectorHtml extends _projector.Projector {
  /**
   * The HTML document lang.
   */
  lang = null;

  /**
   * The HTML document title.
   */
  title = null;

  /**
   * HTML document background style.
   */
  background = null;

  /**
   * HTML document color style.
   */
  color = null;

  /**
   * Required <object> classid attribute.
   */
  classid = 'clsid:D27CDB6E-AE6D-11CF-96B8-444553540000';

  /**
   * Required <embed> type attribute.
   */
  type = 'application/x-shockwave-flash';

  /**
   * The <object> codebase attribute.
   */
  codebase = null;

  /**
   * The <embed> codebase attribute.
   */
  pluginspage = null;

  /**
   * Required src/movie URL (unless using custom HTML).
   */
  src = '';

  /**
   * Required movie width (unless using custom HTML).
   */
  width = null;

  /**
   * Required movie height (unless using custom HTML).
   */
  height = null;

  /**
   * The name for object, param, and embed elements.
   */
  name = null;

  /**
   * The id for the object element.
   */
  id = null;

  /**
   * The movie background color.
   */
  bgcolor = null;

  /**
   * The play attribute.
   */
  play = null;

  /**
   * The loop attribute.
   */
  loop = null;

  /**
   * The menu attribute.
   */
  menu = null;

  /**
   * The quality attribute (low | autolow | autohigh | medium | high | best).
   */
  quality = null;

  /**
   * The scale attribute (default | noborder | exactfit | noscale).
   */
  scale = null;

  /**
   * The align attribute (l | r | t).
   */
  align = null;

  /**
   * The salign attribute (l | t | r | tl | tr).
   */
  salign = null;

  /**
   * The wmode attribute (window | direct | opaque | transparent | gpu).
   */
  wmode = null;

  /**
   * The base attribute (URL or path).
   */
  base = null;

  /**
   * The allowFullScreen attribute (true | false).
   */
  allowFullScreen = null;

  /**
   * The allowFullScreenInteractive attribute (true | false), for AIR.
   */
  allowFullScreenInteractive = null;

  /**
   * The allowScriptAccess attribute (always | sameDomain | never).
   */
  allowScriptAccess = null;

  /**
   * The allowNetworking attribute (all | internal | none), for AIR.
   */
  allowNetworking = null;

  /**
   * The fullScreenAspectRatio attribute (portrait | landscape).
   */
  fullScreenAspectRatio = null;

  /**
   * The flashvars attribute (variable key=value pairs).
   */
  flashvars = null;

  /**
   * The browserzoom attribute (scale | noscale).
   */
  browserzoom = null;

  /**
   * The devicefont attribute (try to render static text as device text).
   */
  devicefont = null;

  /**
   * The swliveconnect attribute (liveconnect?).
   */
  swliveconnect = null;

  /**
   * The expressinstall attribute (for express install?).
   */
  expressinstall = null;

  /**
   * The swfversion attribute (for update checking?).
   */
  swfversion = null;

  /**
   * Custom HTML to use instead of generated HTML.
   */
  html = null;

  /**
   * ProjectorHtml constructor.
   *
   * @param path Output path.
   */
  constructor(path) {
    super(path);
  }

  /**
   * @inheritdoc
   */
  async write() {
    const {
      path
    } = this;
    await (0, _promises.mkdir)((0, _nodePath.dirname)(path), {
      recursive: true
    });
    await (0, _promises.writeFile)(path, await this.getHtml());
  }

  /**
   * Get HTML document code.
   *
   * @returns HTML code.
   */
  async getHtml() {
    const {
      html
    } = this;
    if (html) {
      return typeof html === 'function' ? html(this) : html;
    }
    return this.getHtmlDefault();
  }

  /**
   * Get the default HTML document code.
   *
   * @returns HTML code.
   */
  getHtmlDefault() {
    const {
      lang,
      title,
      background,
      color,
      classid,
      type,
      codebase,
      pluginspage,
      src,
      width,
      height,
      id,
      name,
      bgcolor,
      play,
      loop,
      menu,
      quality,
      scale,
      align,
      salign,
      wmode,
      base,
      allowFullScreen,
      allowFullScreenInteractive,
      allowScriptAccess,
      allowNetworking,
      fullScreenAspectRatio,
      flashvars,
      browserzoom,
      devicefont,
      swliveconnect,
      expressinstall,
      swfversion
    } = this;
    if (!src) {
      throw new Error('Required property: src');
    }
    if (width === null) {
      throw new Error('Required property: width');
    }
    if (height === null) {
      throw new Error('Required property: height');
    }
    const object = new Map();
    object.set('classid', classid);
    if (codebase !== null) {
      object.set('codebase', codebase);
    }
    object.set('width', `${width}`);
    object.set('height', `${height}`);
    if (id !== null) {
      object.set('id', id);
    }
    const param = new Map();
    param.set('movie', src);
    const embed = new Map();
    embed.set('type', type);
    if (pluginspage !== null) {
      embed.set('pluginspage', pluginspage);
    }
    embed.set('width', `${width}`);
    embed.set('height', `${height}`);
    embed.set('src', src);
    if (name !== null) {
      object.set('name', name);
      param.set('name', name);
      embed.set('name', name);
    }
    for (const [k, v] of [['bgcolor', bgcolor], ['play', play], ['loop', loop], ['menu', menu], ['quality', quality], ['scale', scale], ['align', align], ['salign', salign], ['wmode', wmode], ['base', base], ['allowfullscreen', allowFullScreen], ['allowfullscreeninteractive', allowFullScreenInteractive], ['allowscriptsccess', allowScriptAccess], ['allownetworking', allowNetworking], ['fullscreenaspectratio', fullScreenAspectRatio], ['flashvars', flashvars], ['browserzoom', browserzoom], ['devicefont', devicefont], ['swliveconnect', swliveconnect], ['expressinstall', expressinstall], ['swfversion', swfversion]]) {
      if (v !== null) {
        param.set(k, `${v}`);
        embed.set(k, `${v}`);
      }
    }
    const hAttr = lang === null ? '' : ` lang="${(0, _util.htmlEncode)(lang, true)}"`;
    return ['<!DOCTYPE html>', `<html${hAttr}>`, ' <head>', '  <meta charset="UTF-8">', '  <meta http-equiv="X-UA-Compatible" content="IE=Edge">', ...(title === null ? [] : [`  <title>${(0, _util.htmlEncode)(title)}</title>`]), '  <style>', '   * {', '    margin: 0;', '    padding: 0;', '   }', '   html,', '   body {', '    height: 100%;', '   }', '   body {', ...(background === null ? [] : [`    background: ${(0, _util.htmlEncode)(background)};`]), ...(color === null ? [] : [`    color: ${(0, _util.htmlEncode)(color)};`]), '    font-family: Verdana, Geneva, sans-serif;', '   }', '   object,', '   embed {', '    display: block;', '    outline: 0;', '   }', '   object:focus,', '   embed:focus {', '    outline: 0;', '   }', '   .main {', '    display: table;', '    height: 100%;', '    width: 100%;', '   }', '   .player {', '    display: table-cell;', '    vertical-align: middle;', '   }', '   .player object,', '   .player embed {', '    margin: 0 auto;', '   }', '  </style>', ' </head>', ' <body>', '  <div class="main">', '   <div class="player">', '    <object', ...[...object.entries()].map(([a, v]) => `     ${a}="${(0, _util.htmlEncode)(v, true)}"`), '    >', ...[...param.entries()].map(([a, v]) => `     <param name="${a}" value="${(0, _util.htmlEncode)(v, true)}">`), '     <embed', ...[...embed.entries()].map(([a, v]) => `      ${a}="${(0, _util.htmlEncode)(v, true)}"`), '     >', '    </object>', '   </div>', '  </div>', ' </body>', '</html>', ''].map(s => s.replace(/^\s+/, s => '\t'.repeat(s.length))).join('\n');
  }
}
exports.ProjectorHtml = ProjectorHtml;
//# sourceMappingURL=html.js.map