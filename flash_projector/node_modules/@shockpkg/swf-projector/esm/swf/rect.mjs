import { Data } from "./data.mjs";
import { bitCountS, bitCountToBytes, bitWriter } from "./util.mjs";

/**
 * Rect object.
 */
export class Rect extends Data {
  /**
   * Minimum X.
   */
  xMin = 0;

  /**
   * Maximum X.
   */
  xMax = 0;

  /**
   * Minimum Y.
   */
  yMin = 0;

  /**
   * Maximum Y.
   */
  yMax = 0;

  /**
   * Rect constructor.
   */
  constructor() {
    super();
  }

  /**
   * Number of bits need to encode the values.
   *
   * @returns Bit count.
   */
  get nBits() {
    return Math.max(bitCountS(this.xMin), bitCountS(this.xMax), bitCountS(this.yMin), bitCountS(this.yMax));
  }

  /**
   * @inheritdoc
   */
  get size() {
    return bitCountToBytes(5 + this.nBits * 4);
  }

  /**
   * @inheritdoc
   */
  encoder(data) {
    const {
      nBits
    } = this;
    const bW = bitWriter(data, 0);
    let b = 0;
    bW(nBits, 5, b);
    b += 5;
    for (const value of [this.xMin, this.xMax, this.yMin, this.yMax]) {
      bW(value, nBits, b);
      b += nBits;
    }
    const over = b % 8;
    if (over) {
      bW(0, 8 - over, b);
    }
  }
}
//# sourceMappingURL=rect.mjs.map