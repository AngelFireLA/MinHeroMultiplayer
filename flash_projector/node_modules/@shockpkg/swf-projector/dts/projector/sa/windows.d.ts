import { IFilePatch, ProjectorSa } from '../sa.ts';
/**
 * ProjectorSaWindows object.
 */
export declare class ProjectorSaWindows extends ProjectorSa {
    /**
     * Icon data.
     */
    iconData: Readonly<Uint8Array> | (() => Readonly<Uint8Array>) | (() => Promise<Readonly<Uint8Array>>) | null;
    /**
     * Icon file.
     */
    iconFile: string | null;
    /**
     * Version strings.
     */
    versionStrings: Readonly<{
        [key: string]: string;
    }> | null;
    /**
     * Remove the code signature.
     */
    removeCodeSignature: boolean;
    /**
     * Attempt to patch the window title with a custom title.
     * Set to string to automatically patch the binary if possible.
     */
    patchWindowTitle: string | null;
    /**
     * Disable the out-of-date check introduced in version 30.
     * Important since version 35 where there are 90 and 180 day defaults.
     */
    patchOutOfDateDisable: boolean;
    /**
     * ProjectorSaWindows constructor.
     *
     * @param path Output path.
     */
    constructor(path: string);
    /**
     * @inheritdoc
     */
    get extension(): string;
    /**
     * Get icon data if any specified, from data or file.
     *
     * @returns Icon data or null.
     */
    getIconData(): Promise<Readonly<Uint8Array> | null>;
    /**
     * @inheritdoc
     */
    protected _writePlayer(player: string): Promise<void>;
    /**
     * Get patches to apply.
     *
     * @returns Patches list.
     */
    protected _getPatches(): Promise<IFilePatch[]>;
    /**
     * Get patch for binary.
     *
     * @returns Patch spec.
     */
    protected _getPatchBinary(): Promise<IFilePatch | null>;
    /**
     * Get patch for movie.
     *
     * @returns Patch spec.
     */
    protected _getPatchMovie(): Promise<IFilePatch | null>;
}
