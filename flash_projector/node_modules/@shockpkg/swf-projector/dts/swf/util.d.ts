/**
 * Set subview of an existing buffer.
 *
 * @param data Data to get a subview of.
 * @param start Start offset.
 * @param size Subview size.
 * @returns Data subview.
 */
export declare function subview(data: Uint8Array, start: number, size?: number): Uint8Array;
/**
 * Encode a string as a C-String.
 *
 * @param str String to be encoded.
 * @returns Encoded string.
 */
export declare function stringEncode(str: string): Uint8Array;
/**
 * Get number of bits needed to encode an unsigned integer.
 *
 * @param i Integer, unsigned.
 * @returns The number of bits.
 */
export declare function bitCountU(i: number): number;
/**
 * Get number of bits needed to encode a signed integer.
 *
 * @param i Integer, signed.
 * @returns The number of bits.
 */
export declare function bitCountS(i: number): number;
/**
 * Get the number of bytes needed to store N bit.
 *
 * @param bits The number of bits.
 * @returns The number of bytes.
 */
export declare function bitCountToBytes(bits: number): number;
/**
 * Create a bit writer function for a buffer at offset.
 *
 * @param data The buffer to write bits into.
 * @param start Start offset.
 * @returns Writter function (value, count, offset).
 */
export declare function bitWriter(data: Uint8Array, start?: number): (v: number, c: number, b: number) => void;
