/**
 * Encode integer as 4 byte hex.
 *
 * @param i The integer to encode.
 * @returns Hex string.
 */
export declare function hex4(i: number): string;
/**
 * Align integer.
 *
 * @param i Integer value.
 * @param align Alignment amount.
 * @returns Aligned integer.
 */
export declare function align(i: number, align: number): number;
/**
 * Concat data chunks together.
 *
 * @param pieces The pieces to merge.
 * @returns Merged data.
 */
export declare function concat(pieces: readonly Readonly<Uint8Array>[]): Uint8Array;
/**
 * Get buffer.
 *
 * @param data Data view.
 * @param offset The offset.
 * @param size The size.
 * @returns ArrayBuffer slice.
 */
export declare function getBuffer(data: Readonly<DataView>, offset: number, size?: number): ArrayBuffer;
/**
 * Set buffer.
 *
 * @param data Data view.
 * @param offset The offset.
 * @param buffer The ArrayBuffer.
 * @param size The size.
 */
export declare function setBuffer(data: DataView, offset: number, buffer: Readonly<ArrayBuffer>, size?: number): void;
/**
 * Find exact match in data.
 *
 * @param data Data to search.
 * @param find Search for.
 * @param from Search from.
 * @returns Index.
 */
export declare function findIndex(data: Readonly<Uint8Array>, find: Readonly<Uint8Array>, from?: number): number;
/**
 * Get C-String with a max length.
 *
 * @param data Data buffer.
 * @param i Integer offset.
 * @param l Max length.
 * @returns ASCII string.
 */
export declare function getCstrN(data: Readonly<Uint8Array>, i: number, l: number): string;
/**
 * Encode string as UTF-16.
 *
 * @param str The string to encode.
 * @param le Little endian.
 * @returns Encoded data.
 */
export declare function encodeUtf16(str: string, le?: boolean): Uint8Array;
/**
 * Get UTF16 string from data buffer.
 *
 * @param data Data buffer.
 * @param i Start index.
 * @param le Little endian.
 * @returns Decoded string or null if never null terminated.
 */
export declare function getUtf16(data: Readonly<Uint8Array>, i: number, le?: boolean): string | null;
